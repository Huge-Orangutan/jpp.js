{
  "name": "Jpp.js",
  "tagline": "Jpp.js is a library to extend some useful functions for JavaScript. The meaning of jpp is JavaScript plus plus",
  "body": "# jpp.js\r\n--------\r\n\r\n## What's jpp.js\r\nJpp.js is a library to extend some useful functions such as create a powerful `class` (with `private` & `protected` & `public` & `static` properties and methods) for JavaScript. The meaning of jpp is JavaScript plus plus. \r\n\r\n## How to use jpp.js\r\nFirst, you need to get jpp.js.\r\n\r\n**With Git:**\r\n\r\n```\r\n$ git clone git@github.com:yuehaowang/jpp.js.git\r\n```\r\n\r\n**Without Git:**\r\n\r\nThe url to download the library is: [https://github.com/.../master.zip](https://github.com/yuehaowang/jpp.js/archive/master.zip)\r\n\r\nSecond, copy jpp-a.b.c.js to your project directory and import the js file, then you can use jpp. It's so easy, isn't it?\r\n\r\n## A live example\r\nThe example below is to show how to create a powerful `class` which is enabled to define `private`, `protected` and `public` properties and methods:\r\n```javascript\r\nvar People = jpp.class({\r\n\textends : null,\r\n\tprivate : {\r\n\t\tid : null,\r\n\t\thobby : null\r\n\t},\r\n\tprotected : {\r\n\t\tmoney : null,\r\n\t\tphoneNumber : null\r\n\t},\r\n\tpublic : {\r\n\t\tfirstName : null,\r\n\t\tlastName : null,\r\n\t\tage : null,\r\n\t\tbirthday : null,\r\n\t\toccupation : null,\r\n\t\t\r\n\t\tconstructor : function (name, id) {\r\n\t\t\tif (name) {\r\n\t\t\t\tvar nameArray = name.split(\" \");\r\n\r\n\t\t\t\tthis.firstName = nameArray[0];\r\n\t\t\t\tthis.lastName = nameArray[1];\r\n\t\t\t}\r\n\r\n\t\t\tif (id) {\r\n\t\t\t\tthis.id = id;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetBirthday : function (date) {\r\n\t\t\tif (date) {\r\n\t\t\t\tthis.birthday = date;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetBirthday : function () {\r\n\t\t\treturn this.birthday;\r\n\t\t},\r\n\r\n\t\taskForId : function () {\r\n\t\t\treturn this.id;\r\n\t\t},\r\n\r\n\t\tfindHobby : function () {\r\n\t\t\treturn this.hobby;\r\n\t\t}\r\n\t},\r\n\tstatic : {\r\n\t\tOCCUPATION_PROGRAMMER : \"programmer\",\r\n\t\tOCCUPATION_ARTIST : \"artist\",\r\n\t\tOCCUPATION_MUSICIAN : \"musician\",\r\n\t\tOCCUPATION_STUDENT : \"student\"\r\n\t}\r\n});\r\n\r\nvar peter = new People(\"Peter Wong\", 543232123565);\r\npeter.occupation = People.OCCUPATION_PROGRAMMER;\r\n\r\npeter.setBirthday(\"19980727\");\r\n\r\n// result: Peter\r\nalert(peter.firstName);\r\n// result: 19990727\r\nalert(peter.getBirthday());\r\n// result: 51092028\r\nalert(peter.askForId());\r\n// result: null\r\nalert(peter.findHobby());\r\n// result: programmer\r\nalert(peter.occupation);\r\n// error\r\nalert(peter.id);\r\n```\r\n\r\n## Browser compatibility\r\nAs `Object.defineProperty` is used in jpp.js, so there are some problems about compatibility. Here is the table to tell you the compatibility situation:\r\n\r\n***Desktop***\r\n\r\n| Firefox | Google Chrome | Internet Explorer | Opera | Safari |\r\n| ------- | ------------- | ----------------- | ----- | ------ |\r\n| 4.0     | 5             | 9                 | 11.6  | 5.1    |\r\n\r\n***Mobile***\r\n\r\n| Firefox Mobile | Android | IE Mobile | Opera Mobile | Safari Mobile |\r\n| -------------- | ------- | --------- | ------------ | ------------- |\r\n| 4.0            | Yes     | 9         | 11.5         | Yes           |\r\n\r\n***From:*** [https://developer.mozilla.org/.../defineProperty#Browser_compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Browser_compatibility)\r\n\r\n## Documentation\r\nThe documentation will be released when the formal version is released. Stay tuned!~\r\n\r\n## Support\r\nIf you find the library has some bugs or you have any questions or advice, please let me know:\r\n\r\n> **My email:** wangyuehao1999@gmail.com\r\n> \r\n> **My twitter:** [twitter.com/yuehaowang](twitter.com/yuehaowang)\r\n\r\n## Changelog\r\n\r\n### version 0.3.1\r\n1. Bugfix: `private` & `protected` properties and methods cannot be used in inner methods of the class.\r\n2. Bugfix: when a overloaded function A is called, if A accepts less arguments than a former overloaded function B whose first few arguments' type are similar to A's , the former function B will be called instead of A.\r\n\r\n### version 0.3.0\r\n1. Bugfix: `private` & `protected` are invalid because of the wrong condition in `if () {...}`.\r\n2. Added: `jpp.overload` function to create a function which is enabled to execute different codes in a function because of different arguments.\r\n\r\n### version 0.2.0\r\n1. Added `jpp.Detector` function to determine if a object is available or if a object is a instance of the class or a object's type is one of basic type (`string`, `object`, `function`, `number`, `boolean`, etc).\r\n2. Added `super` method for classes which are created by `jpp.class`. Using this method will call base class' constructor.\r\n3. Improvement: `extends` property is used to be a `Object` containing `baseClass` property and `arguments` property but now this property is given the base class.\r\n\r\n### version 0.1.1\r\n1. Added `static` property for `jpp.class` to add static properties or methods to classes.\r\n3. Improvement: throw `RangeError` when you get/set `private` or `protected` properties and methods out of the class instead of no-type error.\r\n\r\n### version 0.1.0\r\n1. Added `jpp.class` function to create powerful classes with `private` & `protected` properties and methods. And you can use `extends` property for inheritance.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}